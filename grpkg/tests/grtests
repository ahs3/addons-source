#!/usr/bin/env python3
#
# run tests of the grpkg command and subcommands
#

ROOTNAME = "grpkg"

import os
import subprocess
import unittest

MAIN_DEFAULT_TEXT="""main: do the default
"""
MAIN_DESCRIPTION="""grpkg: tools to help develop and package Gramps addons
"""

MAIN_VERSION="""grpkg v0.0.1, SPDX-License-Identifier: GPL-2.0

Command versions:
    init         v0.0.1 
    test         v20250512-1 
    test2        v20250512-1 
"""

MAIN_HELP="""
usage: grpkg [<subcommand>] [<option>...]

Tools for Gramps addon development

Known subcommands:
   init         initialize a development directory for a Gramps addon
   test         run a simple test case
   test2        run a simple test2 case

Use grpkg <subcommand> --help for command specific information
"""

class TestGlobalArgs(unittest.TestCase):

    def run_cmd(self, cmd):
        env = os.environ.copy()
        env["PATH"] = env["PATH"] + os.pathsep + "."
        res = subprocess.run(cmd, env=env, 
                             capture_output=True, text=True, check=True)
        return res

    def test_noargs(self):
        res = self.run_cmd(ROOTNAME)
        self.assertTrue(len(res.stdout)>0)
        self.assertEqual(res.stdout, MAIN_DEFAULT_TEXT)

    def test_d_arg(self):
        res = self.run_cmd([ROOTNAME, "-d"])
        self.assertTrue(len(res.stdout)>0)
        self.assertEqual(res.stdout, MAIN_DESCRIPTION)

    def test_D_arg(self):
        res = self.run_cmd([ROOTNAME, "-D"])
        self.assertTrue(len(res.stdout)>0)
        self.assertEqual(res.stdout, MAIN_DEFAULT_TEXT)

    def test_debug_arg(self):
        res = self.run_cmd([ROOTNAME, "--debug"])
        self.assertTrue(len(res.stdout)>0)
        self.assertEqual(res.stdout, MAIN_DEFAULT_TEXT)

    def test_description_arg(self):
        res = self.run_cmd([ROOTNAME, "--description"])
        self.assertTrue(len(res.stdout)>0)
        self.assertEqual(res.stdout, MAIN_DESCRIPTION)

    def test_v_arg(self):
        res = self.run_cmd([ROOTNAME, "-v"])
        self.assertTrue(len(res.stdout)>0)
        self.assertEqual(res.stdout, MAIN_DEFAULT_TEXT)

    def test_V_arg(self):
        res = self.run_cmd([ROOTNAME, "-V"])
        self.assertTrue(len(res.stdout)>0)
        self.assertEqual(res.stdout, MAIN_VERSION)

    def test_verbose_arg(self):
        res = self.run_cmd([ROOTNAME, "--verbose"])
        self.assertTrue(len(res.stdout)>0)
        self.assertEqual(res.stdout, MAIN_DEFAULT_TEXT)

    def test_version(self):
        res = self.run_cmd([ROOTNAME, "--version"])
        self.assertTrue(len(res.stdout)>0)
        self.assertEqual(res.stdout, MAIN_VERSION)


if __name__ == "__main__":
    unittest.main()
